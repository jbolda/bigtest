import { Operation } from 'effection';
import yargs, { Argv } from 'yargs';
import { ProjectOptions } from '@bigtest/project';
import { setLogLevel, Levels } from '@bigtest/logging';

import { startServer } from './start-server';
import { runTest } from './run-test';

import { loadConfig } from './config';

type Command = 'server' | 'test' | 'ci';

export function * CLI(argv: string[]): Operation {
  let args = parseOptions(argv);
  let command = args._[0];

  setLogLevel(args.logLevel);

  if (command === 'server') {
    let config: ProjectOptions = yield loadConfig(args);
    yield startServer(config);
    yield;
  } else if (command === 'test') {
    let config: ProjectOptions = yield loadConfig(args);
    yield runTest(config, {
      formatterName: args.formatter,
      showFullStack: false,
      showLog: false,
    });
  } else if (command === 'ci') {
    let config: ProjectOptions = yield loadConfig(args);
    yield startServer(config);
    yield runTest(config, {
      formatterName: args.formatter,
      showFullStack: false,
      showLog: false,
    });
  } else {
    throw new Error(`unknown command: ${command}`);
  }
}

export interface CLIArguments {
  _: [Command];
  testFiles?: string[];
  launch?: string[];
  appUrl?: string;
  appCommand?: string;
  logLevel: Levels;
  formatter?: string;
}

function parseOptions(argv: readonly string[]): CLIArguments {
  function startOptions(yargs: Argv) {
    return yargs
      .option('launch', {
        describe: 'launch specified driver at server startup',
        type: 'array',
      })
      .option('test-files', {
        describe: 'file globs which form the test suite',
        type: 'array'
      })
      .option('app-url', {
        describe: 'url of the target application',
        type: 'string',
      })
      .option('app-command', {
        describe: 'command to start the target application',
        type: 'string'
      })
  };

  function runOptions(yargs: Argv) {
    return yargs
      .option('formatter', {
        alias: 'f',
        describe: 'specify the formatter which is used to format the output',
        type: 'string',
      })
  };

  return yargs({})
    .scriptName('bigtest')
    .option('log-level', {
      default: 'info',
      global: true,
      choices: ['debug', 'info', 'warn', 'error'],
      desc: 'increase or decrease the amount of logging information printed to the console'
    })
    .command('server', 'start a bigtest server', startOptions)
    .command('test', 'run tests against server', runOptions)
    .command('ci', 'start a server and run the test suite', (yargs) => runOptions(startOptions(yargs)))
    .demandCommand()
    .help()
    .parse(argv) as unknown as CLIArguments // types generated by yargs are inadequate
}
