import { Operation } from 'effection';
import yargs, { Argv } from 'yargs';
import { ProjectOptions } from '@bigtest/project';
import { setLogLevel, Levels } from '@bigtest/logging';

import { startServer } from './start-server';
import { runTest } from './run-test';

import { loadConfig } from './config';

export function * CLI(argv: string[]): Operation {
  let args = parseOptions(argv);

  setLogLevel(args.logLevel);

  if (args.command === 'server') {
    let config: ProjectOptions = yield loadConfig(args);
    yield startServer(config, {
      timeout: args.startTimeout,
    });
    yield;
  } else if (args.command === 'test') {
    let config: ProjectOptions = yield loadConfig(args);
    yield runTest(config, {
      files: args.files,
      formatterName: args.formatter,
      showFullStack: false,
      showLog: false,
    });
  } else if (args.command === 'ci') {
    let config: ProjectOptions = yield loadConfig(args);
    config.watchTestFiles = false;
    yield startServer(config, {
      timeout: args.startTimeout,
    });
    yield runTest(config, {
      files: args.files,
      formatterName: args.formatter,
      showFullStack: false,
      showLog: false,
    });
  }
}

interface StartOptions {
  testFiles?: string[];
  launch?: string[];
  appUrl?: string;
  appCommand?: string;
  startTimeout: number;
}

interface RunOptions {
  formatter: string;
  files: string[];
}

interface GlobalOptions {
  logLevel: Levels;
}

type ServerCommandOptions = ({ command: 'server' } & StartOptions & GlobalOptions);
type TestCommandOptions = ({ command: 'test' } & RunOptions & GlobalOptions);
type CiCommandOptions = ({ command: 'ci' } & StartOptions & RunOptions & GlobalOptions);

export type Options = ServerCommandOptions | TestCommandOptions | CiCommandOptions;

function parseOptions(argv: readonly string[]): Options {
  function startOptions(yargs: Argv) {
    return yargs
      .option('launch', {
        describe: 'launch specified driver at server startup',
        type: 'array',
      })
      .option('test-files', {
        describe: 'file globs which form the test suite',
        type: 'array'
      })
      .option('app-url', {
        describe: 'url of the target application',
        type: 'string',
      })
      .option('app-command', {
        describe: 'command to start the target application',
        type: 'string'
      })
      .option('start-timeout', {
        describe: 'duration to wait for BigTest server to start in milliseconds',
        type: 'number',
        default: 120000
      })
  };

  function runOptions(yargs: Argv) {
    return yargs
      .positional('files', {
        describe: 'the test files you would like to run',
      })
      .option('formatter', {
        alias: 'f',
        describe: 'specify the formatter which is used to format the output',
        type: 'string',
        default: 'checks'
      })
  };

  let parsed = yargs({})
    .scriptName('bigtest')
    .option('log-level', {
      default: 'info',
      global: true,
      choices: ['debug', 'info', 'warn', 'error'],
      desc: 'increase or decrease the amount of logging information printed to the console'
    })
    .command('server', 'start a bigtest server', startOptions)
    .command('test [files...]', 'run tests against server', runOptions)
    .command('ci [files...]', 'start a server and run the test suite', (yargs) => runOptions(startOptions(yargs)))
    .demandCommand()
    .help()
    .parse(argv)

  return { command: parsed._[0], ...parsed } as unknown as Options // types generated by yargs are inadequate
}
